"""
Django settings for wharttest_django project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os # Added for environment variables
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')

# 处理HuggingFace环境变量的相对路径
# 将.env文件中的相对路径转换为绝对路径
def setup_huggingface_env():
    """设置HuggingFace环境变量，处理相对路径"""
    hf_vars = ['HF_HOME', 'HF_HUB_CACHE', 'SENTENCE_TRANSFORMERS_HOME']

    for var in hf_vars:
        value = os.environ.get(var)
        if value and not os.path.isabs(value):
            # 如果是相对路径，转换为绝对路径
            abs_path = str(BASE_DIR / value)
            os.environ[var] = abs_path

# 设置HuggingFace环境变量
setup_huggingface_env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Load the secret key from an environment variable.
# For development, a default insecure key is provided if the environment variable is not set.
# In production, DJANGO_SECRET_KEY MUST be set to a strong, unique value.
SECRET_KEY = os.environ.get(
    'DJANGO_SECRET_KEY',
    'django-insecure-jsto-5oth_9(a_xfy#zg@$i$0w47h9a$rw0s&(v#1o5t+s-!*7' # Fallback for dev
)

# SECURITY WARNING: don't run with debug turned on in production!
# Load DEBUG mode from an environment variable. Defaults to False for production.
# Set DJANGO_DEBUG=True in your development environment.
DEBUG = os.environ.get('DJANGO_DEBUG', 'False') == 'True'

# ALLOWED_HOSTS
# Load allowed hosts from an environment variable (comma-separated string).
# In production, DJANGO_ALLOWED_HOSTS should be set to your domain(s).
ALLOWED_HOSTS_ENV = os.environ.get('DJANGO_ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_ENV.split(',')]
elif DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'testserver']  # testserver for Django test client
else:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1'] # Production requires DJANGO_ALLOWED_HOSTS to be set


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',  # 添加 django-filter
    'accounts', # 或者 'accounts.apps.AccountsConfig'
    'projects', # 项目管理应用
    'testcases', # 用例管理应用
    'drf_spectacular',
    'corsheaders', # Added for CORS
    'langgraph_integration', # LangGraph Integration App
    'mcp_tools', # MCP Tools App
    'api_keys', # API Keys Management App
    'knowledge', # Knowledge Base Management App
    'prompts', # 提示词管理应用
    'requirements', # 需求评审管理应用
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Added for CORS, before CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'wharttest_django.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wharttest_django.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# For production, consider using PostgreSQL or MySQL and configure using environment variables.
# Example for PostgreSQL (you would need to install psycopg2-binary):
# if os.environ.get('DATABASE_URL'):
#     import dj_database_url
#     DATABASES = {
#         'default': dj_database_url.config(conn_max_age=600, ssl_require=os.environ.get('DJANGO_DB_SSL', 'False') == 'True')
#     }
# else:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Consider adding STATIC_ROOT for production 'collectstatic'
# STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (User uploads)
# https://docs.djangoproject.com/en/5.2/topics/files/
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication', # 优先使用 JWT 认证
        'api_keys.authentication.APIKeyAuthentication', # 回退到 API Key 认证
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # 默认需要认证
        'wharttest_django.permissions.DjangoModelPermissions', # 使用扩展的 DjangoModelPermissions
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_RENDERER_CLASSES': (
        'wharttest_django.renderers.UnifiedResponseRenderer',
        # 如果你仍然希望在浏览器中看到 DRF 的可浏览 API 界面进行调试，
        # 可以取消下面这行注释。但请注意，它的输出不会经过 UnifiedResponseRenderer。
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    # 'DEFAULT_PARSER_CLASSES': [ # 通常 JSONParser 已经默认包含
    #     'rest_framework.parsers.JSONParser',
    # ],
    # 'EXCEPTION_HANDLER': 'your_project_name.utils.custom_exception_handler', # 如果需要更细致的异常处理
}

# CORS Configuration
# In production, DJANGO_CORS_ALLOWED_ORIGINS (comma-separated) should be set.
CORS_ALLOWED_ORIGINS_ENV = os.environ.get('DJANGO_CORS_ALLOWED_ORIGINS')
if CORS_ALLOWED_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ALLOWED_ORIGINS_ENV.split(',')]
elif DEBUG:
    # Default for development, allows frontend running on common ports
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",  # React default
        "http://127.0.0.1:3000",
        "http://localhost:5173",  # Vite default
        "http://127.0.0.1:5173",
        "http://localhost:8080",  # Vue/Angular default
        "http://127.0.0.1:8080",
        "http://localhost:8000",  # Django dev server
        "http://127.0.0.1:8000",
    ]
else:
    CORS_ALLOWED_ORIGINS = [] # Production requires DJANGO_CORS_ALLOWED_ORIGINS

# Set to False for production unless your API is truly public and needs to allow all origins.
CORS_ALLOW_ALL_ORIGINS = False # Changed from True

# To allow credentials (cookies, authorization headers, etc.)
CORS_ALLOW_CREDENTIALS = True # 允许发送认证信息

# 允许的HTTP方法
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# 允许的请求头
CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# CSRF Trusted Origins - Important if your frontend and backend are on different subdomains or ports
# and you are using session-based authentication or CSRF protection for other parts of your API.
# For JWT based auth like /api/token/, this is less critical but good practice to be aware of.
# Consider loading from DJANGO_CSRF_TRUSTED_ORIGINS in production.
CSRF_TRUSTED_ORIGINS_ENV = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
if CSRF_TRUSTED_ORIGINS_ENV:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_ENV.split(',')]
elif DEBUG:
    CSRF_TRUSTED_ORIGINS = [ # Default for development
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:8080",
        "http://127.0.0.1:8080",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
else:
    CSRF_TRUSTED_ORIGINS = []


# CORS配置已在上面设置

# Simple JWT 配置
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=12),  # 将访问令牌的有效期延长到12小时
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),   # 将刷新令牌的有效期延长到7天
    'ROTATE_REFRESH_TOKENS': True,                 # 刷新令牌时生成新的刷新令牌
    'BLACKLIST_AFTER_ROTATION': False,             # 不使用黑名单
    'UPDATE_LAST_LOGIN': False,                    # 不更新最后登录时间

    'ALGORITHM': 'HS256',                          # 使用HS256算法
    'SIGNING_KEY': SECRET_KEY,                     # 使用Django的SECRET_KEY作为签名密钥

    'AUTH_HEADER_TYPES': ('Bearer',),              # 认证头类型
    'USER_ID_FIELD': 'id',                         # 用户ID字段
    'USER_ID_CLAIM': 'user_id',                    # 用户ID声明
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'knowledge': {
            'format': '[{asctime}] {name} - {levelname} - {message}',
            'style': '{',
            'datefmt': '%H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO', # 将控制台日志级别设置为 INFO
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'knowledge_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'knowledge',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'mcp_tools': { # 为 mcp_tools 应用添加 logger
            'handlers': ['console'],
            'level': 'INFO', # 设置为 INFO 级别
            'propagate': False,
        },
        'knowledge': { # 为 knowledge 应用添加 logger
            'handlers': ['knowledge_console'],
            'level': 'INFO', # 设置为 INFO 级别
            'propagate': False,
        },
        'knowledge.services': { # 为 knowledge.services 模块添加专门的 logger
            'handlers': ['knowledge_console'],
            'level': 'INFO',
            'propagate': False,
        },
        # 可以根据需要添加其他应用的 logger
    },
}
