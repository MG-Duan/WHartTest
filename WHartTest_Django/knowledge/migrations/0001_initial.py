# Generated by Django 5.2 on 2025-06-03 10:03

import django.db.models.deletion
import knowledge.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("projects", "0002_project_creator"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="KnowledgeBase",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="知识库名称")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="描述"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="是否启用")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "vector_store_type",
                    models.CharField(
                        choices=[
                            ("chroma", "ChromaDB"),
                            ("faiss", "FAISS"),
                            ("memory", "InMemory"),
                        ],
                        default="chroma",
                        max_length=50,
                        verbose_name="向量存储类型",
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        default="sentence-transformers/all-MiniLM-L6-v2",
                        max_length=100,
                        verbose_name="嵌入模型",
                    ),
                ),
                (
                    "chunk_size",
                    models.PositiveIntegerField(default=1000, verbose_name="分块大小"),
                ),
                (
                    "chunk_overlap",
                    models.PositiveIntegerField(default=200, verbose_name="分块重叠"),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_knowledge_bases",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建人",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="knowledge_bases",
                        to="projects.project",
                        verbose_name="所属项目",
                    ),
                ),
            ],
            options={
                "verbose_name": "知识库",
                "verbose_name_plural": "知识库",
                "ordering": ["-created_at"],
                "unique_together": {("project", "name")},
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="文档标题")),
                (
                    "document_type",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF"),
                            ("docx", "Word文档"),
                            ("pptx", "PowerPoint"),
                            ("txt", "文本文件"),
                            ("md", "Markdown"),
                            ("html", "HTML"),
                            ("url", "网页链接"),
                        ],
                        max_length=10,
                        verbose_name="文档类型",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=knowledge.models.document_upload_path,
                        verbose_name="文件",
                    ),
                ),
                ("url", models.URLField(blank=True, null=True, verbose_name="网页链接")),
                (
                    "content",
                    models.TextField(blank=True, null=True, verbose_name="文档内容"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "待处理"),
                            ("processing", "处理中"),
                            ("completed", "已完成"),
                            ("failed", "处理失败"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="处理状态",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, null=True, verbose_name="错误信息"),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="文件大小(字节)"
                    ),
                ),
                (
                    "page_count",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="页数"
                    ),
                ),
                (
                    "word_count",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="字数"
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="上传时间"),
                ),
                (
                    "processed_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="处理时间"),
                ),
                (
                    "uploader",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_documents",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="上传人",
                    ),
                ),
                (
                    "knowledge_base",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="knowledge.knowledgebase",
                        verbose_name="所属知识库",
                    ),
                ),
            ],
            options={
                "verbose_name": "文档",
                "verbose_name_plural": "文档",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="QueryLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("query", models.TextField(verbose_name="查询内容")),
                (
                    "response",
                    models.TextField(blank=True, null=True, verbose_name="响应内容"),
                ),
                (
                    "retrieved_chunks",
                    models.JSONField(blank=True, default=list, verbose_name="检索到的分块"),
                ),
                (
                    "similarity_scores",
                    models.JSONField(blank=True, default=list, verbose_name="相似度分数"),
                ),
                (
                    "retrieval_time",
                    models.FloatField(blank=True, null=True, verbose_name="检索耗时(秒)"),
                ),
                (
                    "generation_time",
                    models.FloatField(blank=True, null=True, verbose_name="生成耗时(秒)"),
                ),
                (
                    "total_time",
                    models.FloatField(blank=True, null=True, verbose_name="总耗时(秒)"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="查询时间"),
                ),
                (
                    "knowledge_base",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="query_logs",
                        to="knowledge.knowledgebase",
                        verbose_name="知识库",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="knowledge_queries",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="查询用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "查询日志",
                "verbose_name_plural": "查询日志",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DocumentChunk",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("chunk_index", models.PositiveIntegerField(verbose_name="分块索引")),
                ("content", models.TextField(verbose_name="分块内容")),
                (
                    "vector_id",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="向量ID"
                    ),
                ),
                (
                    "embedding_hash",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="嵌入哈希"
                    ),
                ),
                (
                    "start_index",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="起始位置"
                    ),
                ),
                (
                    "end_index",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="结束位置"
                    ),
                ),
                (
                    "page_number",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="页码"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="knowledge.document",
                        verbose_name="所属文档",
                    ),
                ),
            ],
            options={
                "verbose_name": "文档分块",
                "verbose_name_plural": "文档分块",
                "ordering": ["document", "chunk_index"],
                "unique_together": {("document", "chunk_index")},
            },
        ),
    ]
